[{"F:\\code\\poker-app\\src\\components\\DetailSelect.tsx":"1","F:\\code\\poker-app\\src\\components\\Block.tsx":"2","F:\\code\\poker-app\\src\\components\\Header.tsx":"3","F:\\code\\poker-app\\src\\components\\DesignSelect.tsx":"4","F:\\code\\poker-app\\src\\components\\Card.tsx":"5","F:\\code\\poker-app\\src\\index.tsx":"6","F:\\code\\poker-app\\src\\components\\GameArea.tsx":"7","F:\\code\\poker-app\\src\\components\\Hand.tsx":"8","F:\\code\\poker-app\\src\\components\\PlayerBet.tsx":"9","F:\\code\\poker-app\\src\\functions\\RenderCardFace.tsx":"10","F:\\code\\poker-app\\src\\components\\DeckArea.tsx":"11","F:\\code\\poker-app\\src\\functions\\BadPokerLogic.tsx":"12","F:\\code\\poker-app\\src\\components\\DisplayCard.tsx":"13","F:\\code\\poker-app\\src\\App.tsx":"14","F:\\code\\poker-app\\src\\functions\\Poker.tsx":"15","F:\\code\\poker-app\\src\\components\\PlayerInfo.tsx":"16","F:\\code\\poker-app\\src\\components\\ModeSelector.tsx":"17","F:\\code\\poker-app\\src\\functions\\RandomNumber.tsx":"18","F:\\code\\poker-app\\src\\components\\PreviewCardImage.tsx":"19","F:\\code\\poker-app\\src\\functions\\NameGenerator.tsx":"20","F:\\code\\poker-app\\src\\components\\GameFeed.tsx":"21","F:\\code\\poker-app\\src\\functions\\Deck.tsx":"22"},{"size":5793,"mtime":1616969621705,"results":"23","hashOfConfig":"24"},{"size":757,"mtime":1616600710173,"results":"25","hashOfConfig":"24"},{"size":337,"mtime":1615739271050,"results":"26","hashOfConfig":"24"},{"size":4244,"mtime":1616805661702,"results":"27","hashOfConfig":"24"},{"size":2287,"mtime":1616688120660,"results":"28","hashOfConfig":"24"},{"size":520,"mtime":1615739271053,"results":"29","hashOfConfig":"24"},{"size":7841,"mtime":1617035245750,"results":"30","hashOfConfig":"24"},{"size":1491,"mtime":1616513579024,"results":"31","hashOfConfig":"24"},{"size":1698,"mtime":1617068708771,"results":"32","hashOfConfig":"24"},{"size":671,"mtime":1616804031525,"results":"33","hashOfConfig":"24"},{"size":1672,"mtime":1616690367620,"results":"34","hashOfConfig":"24"},{"size":280,"mtime":1615911794678,"results":"35","hashOfConfig":"24"},{"size":1536,"mtime":1616513579022,"results":"36","hashOfConfig":"24"},{"size":2352,"mtime":1616967936462,"results":"37","hashOfConfig":"24"},{"size":29203,"mtime":1617068892312,"results":"38","hashOfConfig":"24"},{"size":435,"mtime":1616968191841,"results":"39","hashOfConfig":"24"},{"size":356,"mtime":1615739271051,"results":"40","hashOfConfig":"24"},{"size":3048,"mtime":1615739271052,"results":"41","hashOfConfig":"24"},{"size":199,"mtime":1616804054646,"results":"42","hashOfConfig":"24"},{"size":4962,"mtime":1616969276571,"results":"43","hashOfConfig":"24"},{"size":307,"mtime":1616991554208,"results":"44","hashOfConfig":"24"},{"size":3453,"mtime":1615739271051,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"uaft9r",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\code\\poker-app\\src\\components\\DetailSelect.tsx",["94"],"/**\r\n * This component will take details for the game such as number of players, starting cash and min bet\r\n */\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Block from \"./Block\";\r\n\r\nfunction DetailSelect(props: any) {\r\n  const [startStyle, setStartStyle] = useState({});\r\n  const getErrorMessage = () => {\r\n    if (props.minBet < 0) return 1;\r\n    if (props.startMoney <= 0) return 2;\r\n    if (props.minBet > props.startMoney) return 3;\r\n    return null;\r\n  };\r\n  let startMoneyRef: any = React.createRef();\r\n  let numberOfPlayersRef: any = React.createRef();\r\n  let minBetRef: any = React.createRef();\r\n  let nameRef = useRef(null);\r\n  const [canStart, setCanStart] = useState(getErrorMessage() === null);\r\n  const [errorState, setErrorState] = useState(getErrorMessage());\r\n\r\n  useEffect(() => {\r\n    setCanStart(getErrorMessage() === null);\r\n    setErrorState(getErrorMessage());\r\n  }, [props.startMoney, props.minBet]);\r\n\r\n  return (\r\n    <div id=\"detailSelect\">\r\n      <div id=\"detailsInputBox\">\r\n        <div className=\"detailInput\">\r\n          <label>Select number of players:</label>\r\n          <select\r\n            id=\"numberOfPlayers\"\r\n            ref={numberOfPlayersRef}\r\n            defaultValue={props.numOfPlayers}\r\n            onChange={() => {\r\n              props.setNumOfPlayers(+numberOfPlayersRef.current.value);\r\n            }}\r\n          >\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n            <option value=\"4\">4</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"detailInput\">\r\n          <label>Amount of money to start with:&nbsp;&nbsp;</label>\r\n          <input\r\n            id=\"startMoney\"\r\n            ref={startMoneyRef}\r\n            onChange={() => {\r\n              props.setStartMoney(+startMoneyRef.current.value);\r\n            }}\r\n            type=\"number\"\r\n            defaultValue={+props.startMoney}\r\n          ></input>\r\n        </div>\r\n        <div className=\"detailInput\">\r\n          <label>Set Minimum Bet</label>\r\n          <input\r\n            id=\"minBet\"\r\n            ref={minBetRef}\r\n            onChange={() => {\r\n              props.setMinBet(+minBetRef.current.value);\r\n            }}\r\n            type=\"number\"\r\n            defaultValue={+props.minBet}\r\n          ></input>\r\n        </div>\r\n        <div className=\"detailInput\">\r\n          <label htmlFor=\"name\">Enter Name</label>\r\n          <input\r\n            id=\"nameInput\"\r\n            ref={nameRef}\r\n            type=\"text\"\r\n            defaultValue=\"The One\"\r\n            onChange={() => props.setName(nameRef.current.value)}\r\n          ></input>\r\n        </div>\r\n        <label htmlFor=\"presets\">\r\n          <span style={{ paddingLeft: \".3em\" }}>Presets:</span>\r\n          <br />\r\n          <div\r\n            id=\"presetsDiv\"\r\n            style={{\r\n              display: \"flex\",\r\n              flexWrap: \"wrap\",\r\n              justifyContent: \"space-evenly\",\r\n            }}\r\n          >\r\n            <button\r\n              className=\"presetBtn\"\r\n              onClick={() => {\r\n                startMoneyRef.current.value = 10_000_000;\r\n                minBetRef.current.value = 2_500_000;\r\n                props.setStartMoney(10000000);\r\n                props.setMinBet(2500000);\r\n              }}\r\n            >\r\n              High Stakes\r\n            </button>\r\n            <button\r\n              className=\"presetBtn\"\r\n              onClick={() => {\r\n                startMoneyRef.current.value = 1_000;\r\n                minBetRef.current.value = 100;\r\n                props.setStartMoney(1000);\r\n                props.setMinBet(100);\r\n              }}\r\n            >\r\n              Low Stakes\r\n            </button>\r\n            <button\r\n              className=\"presetBtn\"\r\n              onClick={() => {\r\n                startMoneyRef.current.value = 10_000;\r\n                minBetRef.current.value = 5;\r\n                props.setStartMoney(10000);\r\n                props.setMinBet(5);\r\n              }}\r\n            >\r\n              Maybe try the slots\r\n            </button>\r\n            <button\r\n              className=\"presetBtn\"\r\n              onClick={() => {\r\n                startMoneyRef.current.value = 1_000_000;\r\n                minBetRef.current.value = 1_000_000;\r\n                props.setStartMoney(1000000);\r\n                props.setMinBet(1000000);\r\n              }}\r\n            >\r\n              ALL OR NOTHING\r\n            </button>\r\n          </div>\r\n        </label>\r\n      </div>\r\n      <br />\r\n      {canStart ? (\r\n        <Link to=\"/poker\" className={props.mode ? \"lightLink\" : \"darkLink\"}>\r\n          <div\r\n            id=\"startGameLink\"\r\n            className={props.mode ? \"lightLinkDiv\" : \"darkLinkDiv\"}\r\n            style={startStyle}\r\n            onMouseDown={() => {\r\n              setStartStyle({ borderStyle: \"inset\" });\r\n            }}\r\n            onMouseUp={() => {\r\n              setStartStyle({});\r\n            }}\r\n            onMouseLeave={() => {\r\n              setStartStyle({});\r\n            }}\r\n          >\r\n            Start\r\n            <br />\r\n            The\r\n            <br />\r\n            Game\r\n          </div>\r\n        </Link>\r\n      ) : (\r\n        <Block mode={props.mode} code={errorState} />\r\n      )}\r\n      <br />\r\n      {props.minBet === 0 ? (\r\n        <div\r\n          style={{\r\n            whiteSpace: \"pre-wrap\",\r\n            textAlign: \"center\",\r\n            padding: \"0.5em\",\r\n            margin: \".7em\",\r\n            borderStyle: \"solid\",\r\n          }}\r\n        >\r\n          {\r\n            \" Warning minimum bet is zero.\\nThis means no cost to ante\\nand can lead to zero dollar pots\"\r\n          }\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DetailSelect;\r\n",["95","96"],"F:\\code\\poker-app\\src\\components\\Block.tsx",[],"F:\\code\\poker-app\\src\\components\\Header.tsx",[],"F:\\code\\poker-app\\src\\components\\DesignSelect.tsx",["97","98"],"F:\\code\\poker-app\\src\\components\\Card.tsx",["99","100","101"],"import { useEffect, useState } from \"react\";\r\nimport { renderFace, renderBack } from \"../functions/RenderCardFace\";\r\nimport { Card as ACard } from \"../functions/Deck\";\r\nimport DisplayCard from \"./DisplayCard\";\r\n\r\nexport default function Card(props: any) {\r\n  const [hold, setHold] = useState(true);\r\n  //Orientation of card 0 is verticle 1 is horazontal\r\n  const [orientation] = useState(props.player < 2 ? 0 : 1);\r\n\r\n  const holdClickEvent = (cardPos: Number) => {\r\n    props.updateHoldList(+cardPos);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHold(props.holdList[props.cardPos]);\r\n  }, [props.holdList, props.cardPos]);\r\n\r\n  const cardPos = () => {\r\n    return orientation ? \"horazontalCard\" : \"verticalCard\";\r\n  };\r\n\r\n  const getColor = (card: ACard) => {\r\n    return card.getSuit() % 2 === 0\r\n      ? props.mode === 0\r\n        ? \"cardDarkBlack\"\r\n        : \"cardLightBlack\"\r\n      : props.mode === 0\r\n      ? \"cardDarkRed\"\r\n      : \"cardLightRed\";\r\n  };\r\n  const cardClass = (card: ACard) => {\r\n    return (\r\n      (props.mode === 0 ? \"cardDark \" : \"cardLight \") +\r\n      getColor(card) +\r\n      \" \" +\r\n      cardPos()\r\n    );\r\n  };\r\n  function makeHold(player: Number) {\r\n    if (+player === 0)\r\n      return props.canDiscard ? (\r\n        <div\r\n          className={`holdBtn ${hold ? \"keep\" : \"notKeep\"}Btn cardButton btn`}\r\n          onClick={() => holdClickEvent(props.cardPos)}\r\n        >\r\n          {hold ? \"HOLD\" : \"DISCARD\"}\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      );\r\n  }\r\n  const getRotation = (player: number) => {\r\n    if (player === 0) return;\r\n    if (player === 1) return 180;\r\n    if (player === 2) return 90;\r\n    return 270;\r\n  };\r\n  const renderCard = (\r\n    player: number,\r\n    mode: number,\r\n    card: ACard,\r\n    frontDesign: number,\r\n    backDesign: number\r\n  ) => {\r\n    return (\r\n      <DisplayCard\r\n        player={player}\r\n        rotation={getRotation(player)}\r\n        mode={mode}\r\n        card={card}\r\n        frontDesign={frontDesign}\r\n        backDesign={backDesign}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"cardZone\">\r\n      {makeHold(props.player)}\r\n      {renderCard(\r\n        props.player,\r\n        props.mode,\r\n        props.card,\r\n        props.frontDesign,\r\n        props.backDesign\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",["102","103"],"F:\\code\\poker-app\\src\\index.tsx",[],"F:\\code\\poker-app\\src\\components\\GameArea.tsx",["104","105","106","107"],"F:\\code\\poker-app\\src\\components\\Hand.tsx",[],"F:\\code\\poker-app\\src\\components\\PlayerBet.tsx",[],"F:\\code\\poker-app\\src\\functions\\RenderCardFace.tsx",[],"F:\\code\\poker-app\\src\\components\\DeckArea.tsx",[],"F:\\code\\poker-app\\src\\functions\\BadPokerLogic.tsx",[],"F:\\code\\poker-app\\src\\components\\DisplayCard.tsx",["108","109"],"F:\\code\\poker-app\\src\\App.tsx",[],"F:\\code\\poker-app\\src\\functions\\Poker.tsx",[],"F:\\code\\poker-app\\src\\components\\PlayerInfo.tsx",[],"F:\\code\\poker-app\\src\\components\\ModeSelector.tsx",[],"F:\\code\\poker-app\\src\\functions\\RandomNumber.tsx",[],"F:\\code\\poker-app\\src\\components\\PreviewCardImage.tsx",["110"],"F:\\code\\poker-app\\src\\functions\\NameGenerator.tsx",[],"F:\\code\\poker-app\\src\\components\\GameFeed.tsx",["111","112"],"F:\\code\\poker-app\\src\\functions\\Deck.tsx",[],{"ruleId":"113","severity":1,"message":"114","line":26,"column":6,"nodeType":"115","endLine":26,"endColumn":38,"suggestions":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":8,"column":9,"nodeType":"123","messageId":"124","endLine":8,"endColumn":16},{"ruleId":"121","severity":1,"message":"125","line":9,"column":9,"nodeType":"123","messageId":"124","endLine":9,"endColumn":16},{"ruleId":"121","severity":1,"message":"126","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"121","severity":1,"message":"127","line":2,"column":22,"nodeType":"123","messageId":"124","endLine":2,"endColumn":32},{"ruleId":"121","severity":1,"message":"128","line":32,"column":9,"nodeType":"123","messageId":"124","endLine":32,"endColumn":18},{"ruleId":"117","replacedBy":"129"},{"ruleId":"119","replacedBy":"130"},{"ruleId":"121","severity":1,"message":"131","line":11,"column":10,"nodeType":"123","messageId":"124","endLine":11,"endColumn":17},{"ruleId":"121","severity":1,"message":"132","line":26,"column":10,"nodeType":"123","messageId":"124","endLine":26,"endColumn":20},{"ruleId":"121","severity":1,"message":"133","line":40,"column":17,"nodeType":"123","messageId":"124","endLine":40,"endColumn":25},{"ruleId":"113","severity":1,"message":"134","line":115,"column":6,"nodeType":"115","endLine":115,"endColumn":13,"suggestions":"135"},{"ruleId":"121","severity":1,"message":"136","line":6,"column":20,"nodeType":"123","messageId":"124","endLine":6,"endColumn":31},{"ruleId":"137","severity":1,"message":"138","line":43,"column":7,"nodeType":"139","endLine":46,"endColumn":9},{"ruleId":"140","severity":1,"message":"141","line":3,"column":5,"nodeType":"139","endLine":7,"endColumn":7},{"ruleId":"121","severity":1,"message":"142","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":19},{"ruleId":"121","severity":1,"message":"143","line":1,"column":21,"nodeType":"123","messageId":"124","endLine":1,"endColumn":29},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getErrorMessage'. Either include it or remove the dependency array.","ArrayExpression",["144"],"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"@typescript-eslint/no-unused-vars","'backDir' is assigned a value but never used.","Identifier","unusedVar","'faceDir' is assigned a value but never used.","'renderFace' is defined but never used.","'renderBack' is defined but never used.","'cardClass' is assigned a value but never used.",["145"],["146"],"'getName' is defined but never used.","'playerTurn' is assigned a value but never used.","'setNames' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isBettingRound', 'isDiscardRound', 'isDrawRound', 'isPayoutRound', and 'pokerGame'. Either include them or remove the dependency array.",["147"],"'setRotation' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useEffect' is defined but never used.","'useState' is defined but never used.",{"desc":"148","fix":"149"},"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},"Update the dependencies array to be: [props.startMoney, props.minBet, getErrorMessage]",{"range":"152","text":"153"},"Update the dependencies array to be: [isBettingRound, isDiscardRound, isDrawRound, isPayoutRound, pokerGame, round]",{"range":"154","text":"155"},[955,987],"[props.startMoney, props.minBet, getErrorMessage]",[3464,3471],"[isBettingRound, isDiscardRound, isDrawRound, isPayoutRound, pokerGame, round]"]